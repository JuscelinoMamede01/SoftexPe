5. Escreva uma função chamada "soma" que receba dois parâmetros (a e b) e retorne a soma deles.


function soma(n1:number,n2:number):number {
    return n1 + n2;
}

const result =soma(10,35);

console.log(result);


6. Crie uma função chamada "isPar" que receba um número inteiro como parâmetro e retorne "true"
se o número for par ou "false" caso contrário.


function isPar(n1:number):boolean {
    
    if(n1 % 2 == 0){
        return true;
    }else{
        return false;
    }
}

const isParNumber=isPar(10);

console.log("O número é PAR");

7. Elabore uma função chamada "media" que receba três notas como parâmetros e retorne a média
aritmética delas.

function media(nota1:number,nota2:number,nota3:number,) {
    let media= (nota1 + nota2 + nota3)/3;
    return media;
}


const result=media(8.9,8,9)

console.log(result.toFixed(2));


8. Elabore uma função chamada "imc" que receba o peso (em kg) e a altura (em metros) de uma
pessoa e retorne o índice de massa corporal (IMC) dela.

function imc(peso:number, altura:number):number {
    const imc= peso /(altura * altura)
    return imc;
}

const result= imc(99,1.68);

console.log("Seu IMC é de:" + result.toFixed(2));

9. Elabore uma função chamada "calcularDesconto" que receba o valor de um produto e o
percentual de desconto como parâmetros e retorne o valor com o desconto aplicado.

function calcularDeconto(valor:number, percentual:number):number {
    
    return valor * (percentual / 100);
}


const result = calcularDeconto(100,10);

console.log('O valor do desconto é de: R$'+ result);




10. Elabore uma função chamada "calcularImpostoRenda" que receba o salário bruto de uma pessoa
como parâmetro e retorne o valor do imposto de renda a ser pago, considerando as seguintes
faixas de renda:
a. Até R$ 1.903,98: isento
b. De R$ 1.903,99 até R$ 2.826,65: alíquota de 7,5%
c. De R$ 2 .826,66 até R$ 3.751,05: alíquota de 15%
d. De R$ 3.751,06 até R$ 4.664,68: alíquota de 22,5%
e. Acima de R$ 4.664,68: alíquota de 27,5%

function calcularImpostoRenda(salario:number): number {

    if (salario <= 1903.98) {
        return 0;
    }
    else if (salario > 1903.98 && salario <= 2826.65) {
        return salario * (7.5 / 100);
    }
    else if (salario > 2826.65 && salario <= 3751.05) {
        return salario * (15 / 100);
    }
    else if (salario > 3751.05 && salario <= 4664.68) {
        return salario * (22.5 / 100);
    }
    else {
        return salario * (27.5 / 100);
    }
}    

const result=calcularImpostoRenda(3000);

console.log("O valor arrecado é de: R$"+ result.toFixed(2));  

11. Faça uma função chamada "calcularMediaArredondada" que receba uma lista de números como
parâmetro e retorne a média aritmética desses números, arredondada para o inteiro mais
próximo.
function calcularMediaArredondada(n1:number, n2:number, n3:number):number {
    const media = Math.round((n1 + n2 + n3) / 3);
    return media;
}

const result = calcularMediaArredondada(10, 15, 20);

console.log(result);


12. Desenvolva uma função chamada "contarDigitosParesImpares" que receba um número inteiro
como parâmetro e retorne a quantidade de dígitos pares e a quantidade de dígitos ímpares
presentes nesse número.

function contarDigitosParesImpares(array: number[]): void {
    let countEvenDigits:number = 0;
    let countOddDigits:number = 0;
  
    let array1:string = array.join("");
    array1 = String(array1);
    let splitedArray1 = array1.split("");
  
    for (const digit of splitedArray1) {
      const numericDigit: number = parseInt(digit, 10);

      if (!isNaN(numericDigit)) {
        if (numericDigit % 2 === 0) {
          countEvenDigits++;
        } else {
          countOddDigits++;
        }
      }
    }
  
    console.log(
      `Na sua lista temos ${countEvenDigits} dígitos pares e ${countOddDigits} dígitos ímpares.`
    );
  }
  
  const numbers: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 22, 51, 63, 45, 89, 7896, 635, 123];
  
  contarDigitosParesImpares(numbers);
  




// 13. Crie uma função chamada "calcularMediaAlunos" que receba uma lista de alunos, onde cada aluno
// é representado por um objeto com os atributos "nome" e "nota". A função deve calcular e
// retornar a média das notas de todos os alunos.
interface Aluno {
    nome: string;
    nota1: number;
    nota2: number;
  }
  
  function calcularMediaAlunos(alunos: Aluno[]): void {
    for (let i = 0; i < alunos.length; i++) {
      const media = (alunos[i].nota1 + alunos[i].nota2) / 2;
      console.log(`A média de ${alunos[i].nome} é: ${media.toFixed(1)}`);
    }
  }
  
  const alunos: Aluno[] = [
    { nome: "José", nota1: 8.5, nota2: 9 },
    { nome: "João", nota1: 5.5, nota2: 4 },
    { nome: "Felipe", nota1: 6.5, nota2: 9.3 },
    { nome: "Rafael", nota1: 7.5, nota2: 4.1 },
    { nome: "Leonardo", nota1: 9.5, nota2: 7.2 },
  ];
  
  calcularMediaAlunos(alunos);
  

 14. Crie uma função chamada "calcularIdade" que receba o ano de "nascimento" de uma pessoa como
 parâmetro e retorne a idade atual.
function calcularIdade(anoNascimento: number): number {
    const data: Date = new Date();
    const anoAtual: number = data.getFullYear();


    return anoAtual - anoNascimento;
    }

const anoNascimento:number = parseInt(prompt("Digite seu ano de nascimento: "));
console.log(`Você tem ${calcularIdade(anoNascimento)} anos`);
  
15. Crie uma função chamada "gerarTabuada" que receba um "número" como parâmetro e exiba a
tabuada desse número de 1 a 10 no console.

function gerarTabuada(numero: number): void {
    for (let i: number = 1; i <= 10; i++) {
      const resultado: number = i * numero;
      console.log(`${i} x ${numero} = ${resultado}`);
    }
  }
  
const numero: number = parseInt(prompt("Digite um número para ver sua tabuada: "));
gerarTabuada(numero);


16. Escreva uma função chamada "advinheNumero" que gera aleatoriamente um número inteiro entre
1 e 100. Em seguida, permita que o usuário insira tentativas para adivinhar o número. A função
deve dar dicas ao usuário se o número correto é maior ou menor do que a tentativa. Quando o
usuário acertar, exiba uma mensagem de parabéns e informe a quantidade de tentativas
utilizadas.

function adivinheNumero(guess: number): void {
    const min: number = 1;
    const max: number = 100;
    const guessNumber: number = Math.floor(Math.random() * (max - min + 1)) + min;
    let attempts: number = 5;
  
    for (let i: number = 0; i < attempts; i++) {
      if (guess < guessNumber) {
        window.alert("Seu número é menor que o meu. Escolha um número maior.");
      } else if (guess > guessNumber) {
        window.alert("Seu número é maior que o meu. Escolha um número menor.");
      } else {
        window.alert(`Parabéns! Você acertou o número ${guessNumber}`);
        return;
      }
      attempts--;
      if (attempts > 0) {
        guess = parseInt(
          prompt(`Tente novamente. Restam ${attempts} tentativas: `));
      }
    }
  
    window.alert(`Suas tentativas acabaram. O número correto era ${guessNumber}`);
  }
  
const myGuess: number = parseInt(prompt("Tente adivinhar meu número: "));
adivinheNumero(myGuess);
  

17. Crie uma função chamada "verificarPropriedade" que receba um objeto e uma string como
parâmetros, e retorne true se o objeto possuir a propriedade com o nome especificado na string, e
false caso contrário.

function verificarPropriedade(objeto: { [key: string]: string }, valor: string): boolean {
    const props = Object.keys(objeto); // Cria um array com todas as propriedades do objeto

    for (let i = 0; i < props.length; i++) {
      const prop = props[i];
      if (objeto[prop] === valor) {
        return true;
      }
    }
    return false;
}
  
const myObject: { [key: string]: string } = {
    word1: "teste",
    word2: "exemplo",
    word3: "Comida",
};
  

const valueToCheck: string = "Comida";//O tipo any permite que a função trabalhe com valores de qualquer tipo.

console.log(verificarPropriedade(myObject, valueToCheck));  
  
18. Faça uma função chamada "calcularPrecoProduto" que receba o "valor de custo" de um produto, a
"margem de lucro" desejada (em percentual) e o "valor do frete" como parâmetros. A função deve
calcular e retornar o preço de venda do produto, considerando que o preço de venda é igual ao
custo acrescido da margem de lucro e do valor do frete.

function calcularPrecoProduto(valorCusto: number, margem: number, frete: number): number {
    const margemCalculo: number = valorCusto * (margem / 100); // Converter a margem para um valor decimal dividindo por 100
    return valorCusto + margemCalculo + frete;
  }
  
  const valorCusto: number = parseFloat(prompt("Digite o valor de custo do produto: "));
  const margemLucro: number = parseFloat(prompt("Digite a margem de lucro que deseja (em percentual): "));
  const frete: number = parseFloat(prompt("Digite o valor do frete: "));
  
  const precoFinal: number = calcularPrecoProduto(valorCusto, margemLucro, frete);
  console.log(`O preço de venda deve ser de R$ ${precoFinal.toFixed(2)}`);

19. Escreva uma função que aceite uma string como parâmetro e encontre a palavra mais longa dentro
da string. String de exemplo: 'Tutorial de desenvolvimento da web'. Resultado esperado:
'Desenvolvimento'.


function findLongestWordLength(myString: string): number {
  const splittedString: string[] = myString.split(" ");
  let longestWordLength: number = 0;

  for (let i: number = 0; i < splittedString.length; i++) {
    const countDigits: number = splittedString[i].length;

    if (countDigits > longestWordLength) {
      longestWordLength = countDigits;
    }
  }

  return longestWordLength;
}

const longestWord: number = findLongestWordLength("Tutorial de desenvolvimento da web");
console.log(longestWord);

// 20. Escreva uma função que pegue uma lista de strings e as imprima, uma por linha, em um quadro
// retangular. Por exemplo, a lista ["Hello", "World", "in", "a", "frame"] é impressa como:
// *********
// * Hello *
// * World *
// * in    *
// * a     *
// * frame *
// *********

function retanguloPorPalavra(array: string[]): void {
    let maiorPalavra: string = "";
  
    // Procura a maior palavra
    for (const element of array) {
      if (maiorPalavra.length < element.length) {
        maiorPalavra = element;
      }
    }
    console.log("*".repeat(maiorPalavra.length + 4));
    const espaco: string = " ";
  
    // Cria o retângulo
    for (const element of array) {
      const numeroDeEspacos: number = maiorPalavra.length - element.length;
      console.log(`* ${element}${espaco.repeat(numeroDeEspacos)} *`);
    }
    console.log("*".repeat(maiorPalavra.length + 4));
  }
  
  const palavras: string[] = [
    "Emersson",
    "Carlos",
    "Rinaldo",
    "Israel",
    "Aristóteles",
    "Marcelo",
    "Isaias",
    "Nara",
    "Bil",
  ];
  
  const palavras2: string[] = ["Marcelo", "Isaias", "Nara", "Bil"];
  
  retanguloPorPalavra(palavras);
  retanguloPorPalavra(palavras2);


// 21. Crie uma função que receba um array de strings e retorne um novo array contendo apenas as
// strings que têm mais de 5 caracteres.

function wordsByLength(array: string[]): string[] {
    const resultArray: string[] = [];
  
    for (let i: number = 0; i < array.length; i++) {
      if (array[i].length > 5) {
        resultArray.push(array[i]);
      }
    }
  
    return resultArray;
  }
  
  const inputArray: string[] = [
    "Ta",
    "maluco",
    "mano!",
    "A",
    "comida",
    "é",
    "muito",
    "boa.",
  ];
  const filteredArray: string[] = wordsByLength(inputArray);
  console.log(filteredArray);


// 22. Crie uma função que recebe um array de objetos com informações sobre livros (título, autor, ano,
// etc.) e retorne um novo array apenas com os livros escritos por determinado autor.

interface Livro {
    titulo: string;
    autor: string;
    ano: number;
}

function findTheAuthor(array: Livro[], author: string): Livro[] {
    const arrayAuthor: Livro[] = [];
  
    for (let i: number = 0; i < array.length; i++) {
      if (author === array[i].autor) {
        arrayAuthor.push(array[i]);
      } else {
        console.log("Autor não encontrado!");
      }
    }
  
    return arrayAuthor;
  }
  
  const autor: string = "Augusto Cury";
  
  const livros: Livro[] = [
    {
      titulo: "O Vendedor de Sonhos",
      autor: "Augusto Cury",
      ano: 2008,
    },
    {
      titulo: "Ansiedade - Como Enfrentar o Mal do Século",
      autor: "Augusto Cury",
      ano: 2013,
    },
    {
      titulo: "1984",
      autor: "George Orwell",
      ano: 1949,
    },
    {
      titulo: "Dom Quixote",
      autor: "Miguel de Cervantes",
      ano: 1605,
    },
    {
      titulo: "A Revolução dos Bichos",
      autor: "George Orwell",
      ano: 1945,
    },
    {
      titulo: "Cem Anos de Solidão",
      autor: "Gabriel García Márquez",
      ano: 1967,
    },
    {
      titulo: "A Menina que Roubava Livros",
      autor: "Markus Zusak",
      ano: 2005,
    },
  ];
  
  console.log(findTheAuthor(livros, autor));
  

23. Crie uma função que recebe um array de objetos representando pessoas (com nome, idade, etc.) e
retorne o nome da pessoa mais velha.

interface Pessoa {
    nome: string;
    idade: number;
}
  
function findOldestPerson(array: Pessoa[]): string {
let oldestAge: number = 0;
let oldestPersonName: string = "";

for (let i: number = 0; i < array.length; i++) {
    if (array[i].idade > oldestAge) {
    oldestAge = array[i].idade;
    oldestPersonName = array[i].nome;
    }
}

return oldestPersonName;
}
  
const people: Pessoa[] = [
{
    nome: "João",
    idade: 25,
},
{
    nome: "Maria",
    idade: 30,
},
{
    nome: "Emma",
    idade: 28,
},
{
    nome: "Luis",
    idade: 22,
},
];

const oldestName: string = findOldestPerson(people);
console.log(`A pessoa mais velha é: ${oldestName}`);


24. Escreva uma função que recebe um array de objetos com informações sobre carros (com marca,
modelo, ano, etc.) e retorne um novo array apenas com os carros fabricados após um certo ano
específico.

interface Carro {
    marca: string;
    modelo: string;
    ano: number;
}

function findCars(array: Carro[], year: number): Carro[] {
let foundCars: Carro[] = [];

for (let i: number = 0; i < array.length; i++) {
    if (year <= array[i].ano) {
    foundCars.push(array[i]);
    }
}

return foundCars;
}

const manufacturingYear: number = 2023;

const cars: Carro[] = [
{
    marca: "Toyota",
    modelo: "Corolla",
    ano: 2022,
},
{
    marca: "Honda",
    modelo: "Civic",
    ano: 2023,
},
{
    marca: "Ford",
    modelo: "Mustang",
    ano: 2021,
},
{
    marca: "Chevrolet",
    modelo: "Camaro",
    ano: 2022,
},
{
    marca: "Volkswagen",
    modelo: "Golf",
    ano: 2023,
},
];

console.log(findCars(cars, manufacturingYear));


25. Crie uma função chamada "inverterString" que recebe uma string como argumento e retorna a
string invertida. Por exemplo, para a entrada "hello", a função deve retornar "olleh".

function inverterString(string: string): string {
  let inverted: string = "";
  for (let i: number = string.length - 1; i >= 0; i--) {
    inverted += string[i];
  }
  return inverted;
}

const inputString: string = "hello world";
const reversedString: string = inverterString(inputString);
console.log(reversedString);

  
